一、Openssl支持的加密算法有：
-aes-128-cbc -aes-128-cfb -aes-128-cfb1
-aes-128-cfb8 -aes-128-ecb -aes-128-ofb
-aes-192-cbc -aes-192-cfb -aes-192-cfb1
-aes-192-cfb8 -aes-192-ecb -aes-192-ofb
-aes-256-cbc -aes-256-cfb -aes-256-cfb1
-aes-256-cfb8 -aes-256-ecb -aes-256-ofb
-aes128 -aes192 -aes256
-bf -bf-cbc -bf-cfb
-bf-ecb -bf-ofb -blowfish
-cast -cast-cbc -cast5-cbc
-cast5-cfb -cast5-ecb -cast5-ofb
-des -des-cbc -des-cfb
-des-cfb1 -des-cfb8 -des-ecb
-des-ede -des-ede-cbc -des-ede-cfb
-des-ede-ofb -des-ede3 -des-ede3-cbc
-des-ede3-cfb -des-ede3-ofb -des-ofb
-des3 -desx -desx-cbc
-rc2 -rc2-40-cbc -rc2-64-cbc
-rc2-cbc -rc2-cfb -rc2-ecb
-rc2-ofb -rc4 -rc4-40

二、Openssl加密指令语法：
SYNOPSIS
openssl enc -ciphername [-in filename] [-out filename] [-pass arg] [-e]
[-d] [-a] [-A] [-k password] [-kfile filename] [-K key] [-iv IV] [-p]
[-P] [-bufsize number] [-nopad] [-debug]
说明：
-chipername选项：加密算法，Openssl支持的算法在上面已经列出了，你只需选择其中一种算法即可实现文件加密功能。

-in选项：输入文件，对于加密来说，输入的应该是明文文件；对于解密来说，输入的应该是加密的文件。该选项后面直接跟文件名。

-out选项：输出文件，对于加密来说，输出的应该是加密后的文件名；对于解密来说，输出的应该是明文文件名。
-pass选项：选择输入口令的方式，输入源可以是标准输入设备，命令行输入，文件、变量等。

-e选项：实现加密功能（不使用-d选项的话默认是加密选项）。
-d选项：实现解密功能。
-a和-A选项：对文件进行BASE64编解码操作。
-K选项：手动输入加密密钥（不使用该选项，Openssl会使用口令自动提取加密密钥）。

-IV选项：输入初始变量（不使用该选项，Openssl会使用口令自动提取初始变量）。
-salt选项：是否使用盐值，默认是使用的。
-p选项：打印出加密算法使用的加密密钥。

三、案例：
1. 使用aes-128-cbc算法加密文件：

openssl enc -aes-128-cbc -in install.log -out enc.log

(注：这里install.log是你想要加密的文件，enc.log是加密后的文件，回车后系统会提示你输入口令）
2. 解密刚刚加密的文件：
openssl enc -d -aes-128-cbc -in enc.log -out install.log
（注：enc.log是刚刚加密的文件，install.log是解密后的文件，-d选项实现解密功能）
3.加密文件后使用BASE64格式进行编码：
openssl enc -aes-128-cbc -in install.log -out enc.log -a

4.使用多种口令输入方式加密：

openssl enc -des-ede3-cbc -in install.log -out enc.log -pass pass:111111

(这种方式的好处是你可以把它写入到脚本中，自动完成加密功能，不使用pass选项默认系统会提示输入口令，并且确认，是需要人工操作的）
四、Openssl的功能还远不只于此，感兴趣的朋友可以参考Openssl的手册学习。在Linux系统中你可以通过：man openssl 快速获得帮助文件

/////////////////////////////////////////////////////////////////////////////////////////////////////////
1,encrypt a file

A:openssl enc -des -e -a -in infile_name -out outfile_name
B:openssl des -e -a -in infile_name -out outfile_name

note:
	enc		表明你使用某个算法进行加密
	-des	具体使用的加密算法
	-e		表明你要执行加密动作(不使用-d选项的话，默认的是加密动作)
	-d		表明你要执行解密动作
	-a		表明使用ASCII进行加密，如果不使用-a选项表示使用二进制进行加密

2,decrypt a file

A:openssl enc -des -d -a -in infile_name -out outfile_name
B:openssl des -d -a -in infile_name -out outfile_name
/////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////
3,Generate privatekey *.key *.pem

genrsa
	A:openssl genrsa -out privatekey.key 1024/2048/4096
	B:openssl genrsa -des3/des/idea -out privatekey.key 1024/2048/4096  -->对私钥使用密码加密
	
////gendsa  //{parameter-file-name} in this file determine the size of the private key
////	A:openssl gendsa -out privatekey.key {parameter-file-name}
////	B:openssl gendsa -des3/des/idea -out privatekey.key {parameter-file-name} -->对私钥使用密码加密
	
dsaparam
	A:openssl dsaparam -noout -out privatekey.key -genkey 1024/2048/4096

4,Generate pubkey from privatekey
	openssl rsa -in privatekey.key -pubout -out pubkey.key
	openssl rsa -in privatekey.key -pubout -noout -out pubkey.key

	openssl dsa -in privatekey.key -pubout -out pubkey.key
	openssl dsa -in privatekey.key -pubout -noout -out pubkey.key
	
5,protect privatekey and pubkey with //base64, bf, cast, des, des3, idea, rc2, rc4, rc5 and so// for tran
	openssl enc -des3 -e -in privatekey -out privatekey.des3

6,encrypt with pubkey or privatekey,decrypt with privatekey or pubkey
	openssl rsautl -inkey pubkey.key -pubin -encrypt -in infile -out outfile
	openssl rsautl -inkey privatekey.key -decrypt -in outfile -out outfile1
	注意无法加密大文件
/////////////////////////////////////////////////////////////////////////////////////////////////////////
